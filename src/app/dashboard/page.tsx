"use client";
import { useTheme } from "@/themProvider";

const DashBoard = () => {
  const { color, changeColor } = useTheme();
  const colors = ["blue", "red", "green", "purple"];

  return (
    <div style={{ backgroundColor: color }}>
      <div>
        {colors?.map((c) => (
          <button
            key={c}
            onClick={() => changeColor(c)}
            style={{
              backgroundColor: c,
              color: "white",
              margin: "5px",
              padding: "10px",
              border: "none",
              cursor: "pointer",
            }}
          >
            Change to {c}
          </button>
        ))}
      </div>
      <h1>DashBoard</h1>
      <div>
        <pre className="bg-black text-white">
          <h2>layout.tsx</h2>
          <code>
            {`import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import StoreProvider from "./redux/provider";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body
        className={\`\${geistSans.variable} \${geistMono.variable} antialiased\`}
      >
        <StoreProvider>{children}</StoreProvider>
      </body>
    </html>
  );
}`}
          </code>
        </pre>

        <br />
        <pre className="bg-black text-white">
          <h2>/redux/provider.tsx</h2>
          <code>
            {`"use client";

import { useRef } from "react";
import { Provider } from "react-redux";
import { AppStore, makeStore } from "./store";

export default function StoreProvider({
  children,
}: {
  children: React.ReactNode;
}) {
  const storeRef = useRef<AppStore>();

  if (!storeRef.current) {
    storeRef.current = makeStore();
  }

  return <Provider store={storeRef.current}>{children}</Provider>;
}
`}
          </code>
        </pre>
        <br />
        <pre className="bg-black text-white">
          <h2>/redux/store.tsx</h2>
          <code>
            {`import { configureStore, createSlice } from "@reduxjs/toolkit";

const counterSlice = createSlice({
  name: "counter",
  initialState: {
    value: 0,
  },
  reducers: {
    increment: (state) => {
      state.value += 1;
    },
    decrement: (state) => {
      state.value -= 1;
    },
  },
});

export const { increment, decrement } = counterSlice.actions;

export const makeStore = () => {
  return configureStore({
    reducer: {
      counter: counterSlice.reducer,
    },
  });
};

export type AppStore = ReturnType<typeof makeStore>;

export type RootState = ReturnType<AppStore["getState"]>;
export type AppDispatch = AppStore["dispatch"];

`}
          </code>
        </pre>
      </div>
    </div>
  );
};

export default DashBoard;
